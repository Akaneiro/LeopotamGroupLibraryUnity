//-------------------------------------------------------
// LeopotamGroupLibrary for unity3d
// Copyright (c) 2012-2016 Leopotam <leopotam@gmail.com>
//-------------------------------------------------------
// Autogenerated with Coco/R, dont change it manually.
//-------------------------------------------------------

using System;
using System.Collections.Generic;
namespace LeopotamGroup.Serialization.JsonInternal {
struct Token {
	public int kind;    // token kind
	public string val;  // token value
	public int pos;     // token position in bytes in the source text (starting at 0)
	public int charPos;  // token position in characters in the source text (starting at 0)
	public int col;     // token column (starting at 1)
	public int line;    // token line (starting at 1)
}

//-----------------------------------------------------------------------------------
// Scanner
//-----------------------------------------------------------------------------------
class Scanner {
	const char EOL = '\n';
	const int eofSym = 0; /* pdt */
	const int maxT = 12;
	const int noSym = 12;


	public static readonly Token EmptyToken = new Token { kind = 0, val = "" };

	class Buffer {
		public int Pos;
		public string Data;
		public const int EOF = '\0';

		public int Read() {
			if (Pos >= Data.Length) {
				return EOF;
			}
			return Data[Pos++];
		}

		public int Peek() {
			if ((Pos + 1) >= Data.Length) {
				return EOF;
			}
			return Data[Pos + 1];
		}
	}
	readonly Buffer buffer = new Buffer(); // scanner buffer
	Token t;          // current token
	int ch;           // current input character
	int pos;          // byte position of current character
	int charPos;      // position by unicode characters starting with 0
	int col;          // column number of current character
	int line;         // line number of current character
	int oldEols;      // EOLs that appeared in a comment;
	static readonly Dictionary<int, int> start; // maps first token character to start state

	char[] tval = new char[128]; // text of current token
	int tlen;         // length of current token
	
	static Scanner() {
		start = new Dictionary<int, int> (128);
		for (int i = 48; i <= 57; ++i) start[i] = 2;
		start[45] = 1; 
		start[34] = 5; 
		start[116] = 8; 
		start[102] = 12; 
		start[110] = 17; 
		start[123] = 21; 
		start[58] = 22; 
		start[44] = 23; 
		start[125] = 24; 
		start[91] = 25; 
		start[93] = 26; 
		start[Buffer.EOF] = -1;

	}

	public void Load(string data) {
		buffer.Data = data;
		Reset();
	}

    public Token Scan () {
    	var v = NextToken ();
        return v;
    }

	void Reset() {
		buffer.Pos = 0;
		pos = -1; line = 1; col = 0; charPos = -1;
		oldEols = 0;
		NextCh();
	}

	void NextCh() {
		if (oldEols > 0) { ch = EOL; oldEols--; } 
		else {
			pos = buffer.Pos;
			// buffer reads unicode chars, if UTF8 has been detected
			ch = buffer.Read();
			col++;
			charPos++;
			// replace isolated '\r' by '\n' in order to make
			// eol handling uniform across Windows, Unix and Mac
			if (ch == '\r' && buffer.Peek() != '\n') {
				ch = EOL;
			}
			if (ch == EOL) {
				line++;
				col = 0;
			}
		}

	}

	void AddCh() {
		if (tlen >= tval.Length) {
			char[] newBuf = new char[2 * tval.Length];
			Array.Copy(tval, 0, newBuf, 0, tval.Length);
			tval = newBuf;
		}
		if (ch != Buffer.EOF) {
			tval[tlen++] = (char) ch;
			NextCh();
		}
	}




	void CheckLiteral() {
		switch (t.val) {
			default: break;
		}
	}

	public Token NextToken() {
		while (ch == ' ' ||
			ch >= 9 && ch <= 10 || ch == 13
		) NextCh();

		int recKind = noSym;
		int recEnd = pos;
		t = new Token();
		t.pos = pos; t.col = col; t.line = line; t.charPos = charPos;
		int state;
		if (start.ContainsKey(ch)) { state = (int) start[ch]; }
		else { state = 0; }
		tlen = 0; AddCh();
		
		switch (state) {
			case -1: { t.kind = eofSym; break; } // NextCh already done
			case 0: {
				if (recKind != noSym) {
					tlen = recEnd - t.pos;
					SetScannerBehindT();
				}
				t.kind = recKind; break;
			} // NextCh already done
			case 1:
				if (ch >= '0' && ch <= '9') {AddCh(); goto case 2;}
				else {goto case 0;}
			case 2:
				recEnd = pos; recKind = 1;
				if (ch >= '0' && ch <= '9') {AddCh(); goto case 2;}
				else if (ch == '.') {AddCh(); goto case 3;}
				else {t.kind = 1; break;}
			case 3:
				if (ch >= '0' && ch <= '9') {AddCh(); goto case 4;}
				else {goto case 0;}
			case 4:
				recEnd = pos; recKind = 1;
				if (ch >= '0' && ch <= '9') {AddCh(); goto case 4;}
				else {t.kind = 1; break;}
			case 5:
				if (ch <= '!' || ch >= '#' && ch <= '[' || ch >= ']' && ch <= 65535) {AddCh(); goto case 5;}
				else if (ch == '"') {AddCh(); goto case 6;}
				else if (ch == 92) {AddCh(); goto case 7;}
				else {goto case 0;}
			case 6:
				{t.kind = 2; break;}
			case 7:
				if (ch == '"' || ch == 92) {AddCh(); goto case 5;}
				else {goto case 0;}
			case 8:
				if (ch == 'r') {AddCh(); goto case 9;}
				else {goto case 0;}
			case 9:
				if (ch == 'u') {AddCh(); goto case 10;}
				else {goto case 0;}
			case 10:
				if (ch == 'e') {AddCh(); goto case 11;}
				else {goto case 0;}
			case 11:
				{t.kind = 3; break;}
			case 12:
				if (ch == 'a') {AddCh(); goto case 13;}
				else {goto case 0;}
			case 13:
				if (ch == 'l') {AddCh(); goto case 14;}
				else {goto case 0;}
			case 14:
				if (ch == 's') {AddCh(); goto case 15;}
				else {goto case 0;}
			case 15:
				if (ch == 'e') {AddCh(); goto case 16;}
				else {goto case 0;}
			case 16:
				{t.kind = 4; break;}
			case 17:
				if (ch == 'u') {AddCh(); goto case 18;}
				else {goto case 0;}
			case 18:
				if (ch == 'l') {AddCh(); goto case 19;}
				else {goto case 0;}
			case 19:
				if (ch == 'l') {AddCh(); goto case 20;}
				else {goto case 0;}
			case 20:
				{t.kind = 5; break;}
			case 21:
				{t.kind = 6; break;}
			case 22:
				{t.kind = 7; break;}
			case 23:
				{t.kind = 8; break;}
			case 24:
				{t.kind = 9; break;}
			case 25:
				{t.kind = 10; break;}
			case 26:
				{t.kind = 11; break;}

		}
		t.val = new String(tval, 0, tlen);
		return t;
	}
	
	void SetScannerBehindT() {
		buffer.Pos = t.pos;
		NextCh();
		line = t.line; col = t.col; charPos = t.charPos;
		for (int i = 0; i < tlen; i++) NextCh();
	}
}}